
==================== FINAL INTERFACE ====================
2016-12-03 04:16:59.555665 UTC

interface main@main:Main 8001
  interface hash: 7a4a4b9844ef05d5a5929e30bca70999
  ABI hash: 871de8b241d6f5230275beac3451c517
  export-list hash: ab72cba17444e43017413caa2559a22c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c29ff4d6cbbc9880fb94be0d86b6d159
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      neural-net-0.1.0.0@neural-net-0.1.0.0-SYgV3Sx5uw5ZT4aENrU9C
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  neural-net-0.1.0.0@neural-net-0.1.0.0-SYgV3Sx5uw5ZT4aENrU9C:NeuralNetSigmoid ec66042bb58be299ba6eddf8247fdc15
import  -/  neural-net-0.1.0.0@neural-net-0.1.0.0-SYgV3Sx5uw5ZT4aENrU9C:Type f48ab537fd1248e12ff69cf644c6049f
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
72df7d8af1fa03d943f90def0681e533
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e5a89f534ec5b0f3cfac35a1d1da8000
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main37
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Show.showList__
                      @ GHC.Types.Double
                      GHC.Float.$fShowDouble1
                      (GHC.Base.map
                         @ [GHC.Types.Char]
                         @ GHC.Types.Double
                         Main.main2
                         (Data.OldList.lines ipv3))
                      (GHC.Types.[] @ GHC.Types.Char))
                   GHC.Types.True
                   ipv2 } }) -}
8335a4e738ed2304f03fab7e54ec3df1
  main10 :: [Type.Neuron]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Type.Neuron Main.main18 Main.main11) -}
545229343ed01c1df26f82a38b05473d
  main11 :: [Type.Neuron]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Type.Neuron
                   Main.main12
                   (GHC.Types.[] @ Type.Neuron)) -}
22eb6af241d1f6c5560ceb841f56f80a
  main12 :: Type.Neuron
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Type.Neuron Main.main14 Main.main13) -}
e71b46eb664e2eabf21089635a50c439
  main13 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 5.641957892075575##) -}
02c93fd15076b4f5405331ac9e123f32
  main14 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main17
                   Main.main15) -}
9db34422453e2c946c9237ab58ffbda9
  main15 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main17
                   Main.main16) -}
e176e3b5341c9d66f3b0fe77d74ea7b1
  main16 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main17
                   (GHC.Types.[] @ GHC.Types.Double)) -}
3dffd74cc82dd39f75d86762143e2917
  main17 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 3.732112288347366##) -}
390dae502df4a4df00ad4e919e15fa8e
  main18 :: Type.Neuron
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Type.Neuron Main.main20 Main.main19) -}
c7f5c1747483bbdb098e95818175ce0e
  main19 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 1.6623260406730889##) -}
423df66a2e26209dc97fd922b9d23ae2
  main2 :: [GHC.Types.Char] -> GHC.Types.Double
  {- Arity: 1,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case NeuralNetSigmoid.$wgo
                        (GHC.Base.map
                           @ Type.Neuron
                           @ GHC.Types.Double
                           (let {
                              w :: Type.Input
                              = Data.OldList.wordsFB
                                  @ [GHC.Types.Double]
                                  Main.main33
                                  (GHC.Types.[] @ GHC.Types.Double)
                                  x
                            } in
                            \ (w1 :: Type.Neuron) ->
                            case w1 of ww { Type.Neuron ww1 ww2 ->
                            case ww2 of ww3 { GHC.Types.D# ww4 ->
                            case NeuralNetSigmoid.$wgo w ww1 0.0## of ww5 { DEFAULT ->
                            case GHC.Prim./##
                                   1.0##
                                   (GHC.Prim.+##
                                      1.0##
                                      (GHC.Prim.expDouble#
                                         (GHC.Prim.negateDouble#
                                            (GHC.Prim.-## ww5 ww4)))) of ww6 { DEFAULT ->
                            GHC.Types.D# ww6 } } } })
                           Main.main9)
                        Main.main3
                        0.0## of ww5 { DEFAULT ->
                 case GHC.Prim./##
                        1.0##
                        (GHC.Prim.+##
                           1.0##
                           (GHC.Prim.expDouble#
                              (GHC.Prim.negateDouble#
                                 (GHC.Prim.-## ww5 3.818592726675541##)))) of ww6 { DEFAULT ->
                 GHC.Types.D# ww6 } }) -}
9e6f2108f4f005d1e3ae4d598b641777
  main20 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main24
                   Main.main21) -}
52529b5b196fee199bf08124752f26ca
  main21 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main23
                   Main.main22) -}
3562b70743dd7dc974ad38c42319af55
  main22 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main23
                   (GHC.Types.[] @ GHC.Types.Double)) -}
65918fb197eb70464db2e8018cf90e41
  main23 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 2.7455506772774902##) -}
edb1928a3d974fb23c9b039cf677eb71
  main24 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# -0.2544493227225049##) -}
d1f8da8bcb6652b95f5ac6b2510b8807
  main25 :: Type.Neuron
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Type.Neuron Main.main27 Main.main26) -}
f9cf64635073f4f3fc35dfb299cd49ac
  main26 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# -2.9079878633790495##) -}
96fa7f66dc533a779d10392c027d3d54
  main27 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main32
                   Main.main28) -}
7b9b69658c6578d68c4fab528f53ce3a
  main28 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main31
                   Main.main29) -}
9399a2720be60aafd2a13cfb072344dd
  main29 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main30
                   (GHC.Types.[] @ GHC.Types.Double)) -}
53ac4f82a8732e5f4e7a49a2fe942383
  main3 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main8
                   Main.main4) -}
24b37efd5df455f4cba9021eebaad8b5
  main30 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 2.102265004268705##) -}
de89e3436a9ce11b49bc3da0efc924e6
  main31 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 4.102265004268677##) -}
eee03bbeda8f63fa7f8213118d154d4c
  main32 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# -0.8977349957313048##) -}
d95fb4f9040c85e67490b4c459a01e66
  main33 ::
    [GHC.Types.Char] -> [GHC.Types.Double] -> [GHC.Types.Double]
  {- Arity: 2,
     Unfolding: (\ (x :: [GHC.Types.Char])
                   (ys :: [GHC.Types.Double])[OneShot] ->
                 GHC.Types.:
                   @ GHC.Types.Double
                   (case Text.Read.readEither6
                           @ GHC.Types.Double
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Double
                              Main.main36
                              x) of wild {
                      [] -> Main.main35
                      : x1 ds
                      -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Main.main34 } })
                   ys) -}
70bcc79980f350e3d90db327134791a7
  main34 :: GHC.Types.Double
  {- Strictness: x -}
08abdf93bf7fa8ee0909c213e034168b
  main35 :: GHC.Types.Double
  {- Strictness: x -}
66d5d7709e949cc7529efb48901f314b
  main36 :: Text.ParserCombinators.ReadP.P GHC.Types.Double
  {- Unfolding: ((GHC.Read.$fReadDouble9
                    GHC.Read.$fReadDouble_$sconvertFrac
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Double>_R)
                   @ GHC.Types.Double
                   (Text.Read.readEither5 @ GHC.Types.Double)) -}
74d507797ba89edf7859894daba3da5e
  main37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "input/majority.txt"#) -}
bace68d5eabf29851540caece29fdd8c
  main38 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
17eeffe0aa96362a0efd389311accac8
  main4 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main7
                   Main.main5) -}
513c7dbf0bff28797dda3308cd70b499
  main5 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main6
                   (GHC.Types.[] @ GHC.Types.Double)) -}
4c19315a5447ef3a23912b1374f60154
  main6 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 11.628947631918832##) -}
c4c67a1a6313ff9d6c4b2fc53941e0d2
  main7 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 1.7053533587394272##) -}
b0de4a2d77faa25427bfc14fac1e5f32
  main8 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# -3.1450868177305455##) -}
a5fd8c74f5bc5bf5c484f6efc25e3bc3
  main9 :: [Type.Neuron]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Type.Neuron Main.main25 Main.main10) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

